name: Deploy Java application to EKS
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY_NAME }}

jobs:
  build:
    runs-on: ubuntu-latest
 
    strategy:
      matrix:
        java-version: [8.0.x]
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 5
 
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java-version }}
          cache: 'maven'
 
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with: 
          name: java-artifact
          path: target/


  generate_image:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Amazon ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: java-artifact

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.sha_short }}

  # deploy:
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
      
  #       terraform_version: ["1.9.1"]
  #   steps:

  #     - name: Install kubectl
  #       uses: azure/setup-kubectl@v2.0
  #       with:
  #         version: "v1.30.2"
  #       id: install

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
  #         aws-region: us-east-1

  #     - name: Amazon ECR Login
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Create AWS credential file
  #       run: ./.github/scripts/create_credentials.sh ${{ secrets.AWS_ACCESS_KEY_ID }} ${{ secrets.AWS_SECRET_ACCESS_KEY }} ${{ secrets.AWS_SESSION_TOKEN }}

  #     - uses: hashicorp/setup-terraform@v3

  #     - name: Terraform fmt
  #       id: fmt
  #       run: terraform fmt -check
  #       continue-on-error: true

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init

  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform Apply
  #       id: apply
  #       run: terraform apply -auto-approve

  #     - name: Build, tag, and push docker image to Amazon ECR
  #       env:
  #         REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         REPOSITORY: payments-service-example
  #         IMAGE_TAG: latest
  #       run: |
  #         docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
  #         docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  #     - name: Update kube config
  #       run: aws eks update-kubeconfig --name AWSEKSCluster
      
  #     - name: Deploy to EKS
  #       run: |
  #         kubectl apply -f ./Kubernetes/deployment.yaml
  #         kubectl rollout restart deployment payments-service-deployment
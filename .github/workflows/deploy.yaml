---
  name: Deploy Java application to EKS
  on:
    push:
      branches:
        - main
    pull_request:
      branches:
        - main
    workflow_dispatch: null
  env:
    TERRAFORM_WORKING_DIR: terraform
    TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    TF_VAR_aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
    TF_VAR_aws_region: ${{ vars.AWS_REGION }}
    TF_VAR_role_arn: ${{ secrets.AWS_ROLE_ARN }}
  jobs:
    build:
      runs-on: ubuntu-latest
      outputs:
        ecr_repository: ${{ steps.set_repo_name.outputs.ECR_REPOSITORY }}
      strategy:
        matrix:
          java-version:
            - 8.0.x
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 5
        - name: Setup Java
          uses: actions/setup-java@v4
          with:
            distribution: temurin
            java-version: ${{ matrix.java-version }}
            cache: maven
        - name: Build with Maven
          run: mvn -B package --file pom.xml
        - name: TEST BORRAR
          run: basename $(ls target | grep *.jar | head -1) .jar
        - name: Set file name as repository name
          id: set_repo_name
          run: echo "ECR_REPOSITORY=$(basename $(ls target | grep *.jar | head -1) .jar)" >> "$GITHUB_OUTPUT"
        - name: Upload artifact
          uses: actions/upload-artifact@v4
          with:
            name: java-artifact.jar
            path: target/*.jar
    set_up_ecr:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          terraform_version:
            - 1.9.1
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 5
        - uses: hashicorp/setup-terraform@v3
        - name: Terraform fmt
          id: fmt
          run: terraform fmt -check
          working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
          continue-on-error: true
        - name: Terraform Init
          id: init
          run: terraform init
          working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color
          working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        - name: Terraform Apply
          id: apply
          run: terraform apply -auto-approve
          working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
          continue-on-error: true
    generate_image:
      needs:
        - build
        - set_up_ecr
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 5
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        - name: Set outputs
          id: vars
          run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: ${{ vars.AWS_REGION }}
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
          with:
            mask-password: "true"
        - name: Download artifact
          uses: actions/download-artifact@v4
          with:
            name: java-artifact.jar
            path: ./java-artifact.jar
        - name: Build, tag, and push docker image to Amazon ECR
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: ${{ needs.build.outputs.ecr_repository }}
            IMAGE_TAG: ${{ github.sha }}
          run: |
            docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    deploy:
      needs:
        - build
        - generate_image
      runs-on: ubuntu-latest
      strategy:
        matrix:
          kubectl_version:
            - v1.30.2
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 5
        - name: Install kubectl
          uses: azure/setup-kubectl@v2.0
          with:
            version: ${{ matrix.kubectl_version }}
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: ${{ vars.AWS_REGION }}
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
          with:
            mask-password: "true"
        - name: Update kube config
          run: aws eks update-kubeconfig --name AWSEKSCluster
        - name: Deploy to EKS
          run: >
            sed -e "s/{{SERVICE_NAME}}/${{ needs.build.outputs.ecr_repository }}/g" \
                -e "s/{{REGISTRY}}/${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com\/${{ needs.build.outputs.ecr_repository }}/g" \
                -e "s/{{TAG}}/latest/g" \
                -i kubernetes/deployment.yaml
            cat kubernetes/deployment.yaml
  
            kubectl apply -f kubernetes/deployment.yaml
  
            kubectl rollout restart deployment payments-service-deployment
  
name: Deploy Java application to EKS

on:
  workflow_dispatch:
env:
  TERRAFORM_WORKING_DIR: terraform
  TF_VAR_environment: ${{ vars.ENVIRONMENT }}
  TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
  TF_VAR_aws_region: ${{ vars.AWS_REGION }}
  TF_VAR_role_arn: ${{ secrets.AWS_ROLE_ARN }}
  TF_VAR_repository: ${{ github.event.repository.name }}
jobs:
  setup_infra:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform_version:
          - 1.9.1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 5
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        continue-on-error: true
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        continue-on-error: true
  generate_image:
    needs:
      - setup_infra
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.TF_VAR_repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest .
          docker push $REGISTRY/$REPOSITORY --all-tags
  deploy:
    needs:
      - generate_image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kubectl_version:
          - v1.30.2
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 5
      - name: Install kubectl
        uses: Azure/setup-kubectl@v4
        with:
          version: ${{ matrix.kubectl_version }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
      - name: Update kube config
        run: aws eks update-kubeconfig --name AWSEKSCluster
      - name: Deploy to EKS
        run: >
          sed -e "s/{{SERVICE_NAME}}/${{ env.TF_VAR_repository }}/g" \
              -e "s/{{ENVIRONMENT}}/${{ vars.ENVIRONMENT }}/g" \
              -e "s/{{REGISTRY}}/${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/g" \
              -e "s/{{TAG}}/latest/g" \
              -i kubernetes/deployment.yaml
          cat kubernetes/deployment.yaml

          kubectl apply -f kubernetes/deployment.yaml

          kubectl rollout restart deployment ${{ env.TF_VAR_repository }}
